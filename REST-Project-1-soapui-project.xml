<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="d24bf0cd-5fa5-4f6a-a5b7-ed1cf1e79971" activeEnvironment="Default" name="REST Project 1" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="0bcc7a90-bdfe-44eb-88d3-590faaf36d32" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8099" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://Princes-MacBook.local:8089/</con:endpoint><con:endpoint>http://localhost:8099</con:endpoint></con:endpoints><con:resource name="ArcLog" path="/dishs" id="d2e04134-04e6-4412-91ce-34f9fc76ec3f"><con:settings/><con:parameters/><con:method name="ArcLog 1" id="535c8144-f91d-40fe-89a9-455ea39d8677" method="GET"><con:settings/><con:parameters/><con:request name="Dishs" id="c0b425e6-448b-4c01-89db-2bf34a194f5e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8099/arcLog</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="5c233235-eb8a-413c-a0e7-f1251f50a70a" port="8089" path="/" host="Princes-MacBook.local" name="DishRestService"><con:settings/><con:properties/><con:restMockAction name="/dishs" method="GET" resourcePath="/dishs" id="09678620-b08a-4cd7-92f4-6a51cce2f5d8"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="55565888-5d8c-4f6c-b506-122b5a6dd80c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
    {
      "name":"Dish - 1 ",
      "id":"1-D",
      "host":"127.0.0.1",
      "dataPath":"/var/tmp/data",
      "running":true
    },
    {
      "name":"Dish - 2",
      "id":"2-D",
      "host":"127.0.0.2",
      "dataPath":"/var/tmp/data",
      "running":true
    },
    {
      "name":"Dish - 3",
      "id":"3-D",
      "host":"127.0.0.3",
      "dataPath":"/var/tmp/data",
      "running":false
    },
    {
      "name":"Dish - 4",
      "id":"4-D",
      "host":"127.0.0.4",
      "dataPath":"/var/tmp/data",
      "running":true
    },
    {
      "name":"Dish - 5",
      "id":"5-D",
      "host":"127.0.0.5",
      "dataPath":"/var/tmp/data",
      "running":false
    },
    {
      "name":"Dish - 6",
      "id":"6-D",
      "host":"127.0.0.6",
      "dataPath":"/var/tmp/data",
      "running":true
    },
    {
      "name":"Dish - 7",
      "id":"7-D",
      "host":"127.0.0.7",
      "dataPath":"/var/tmp/data",
      "running":true
    },{
      "name":"Dish - 8",
      "id":"8-D",
      "host":"127.0.0.8",
      "dataPath":"/var/tmp/data",
      "running":false
    }
    ,{
      "name":"Dish - 9",
      "id":"9-D",
      "host":"127.0.0.9",
      "dataPath":"/var/tmp/data",
      "running":false
    }
]</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/dish/" method="GET" resourcePath="/dish/" id="d6d302a5-d1c2-4f92-9c79-1a54e0664109"><con:settings/><con:defaultResponse>Dish1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
def _id = requestPath.split("/")[2]


  if(_id.equals("1"))
    return "Dish1"
   else if(_id.equals("2"))
    return "Dish2"
   else if(_id.equals("3"))
    return "Dish3"
   else if(_id.equals("4"))
    return "Dish4"
   else if(_id.equals("5"))
    return "Dish5"
   else if(_id.equals("6"))
    return "Dish6"
   else if(_id.equals("7"))
    return "Dish7" 
   else if(_id.equals("8"))
    return "Dish8"
   else if(_id.equals("9"))
    return "Dish9"


/*
// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Dish1" id="da3a76a2-0266-45f1-813f-9438f000cce4" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
      "name":"Dish - 1",
      "id":"1-D",
      "host":"127.0.0.1",
      "dataPath":"/var/tmp/data",
      "running":true
    }</con:responseContent></con:response><con:response name="Dish2" id="16dbb90c-b274-49cb-a687-f9fef7b7122d" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
      "name":"Dish - 2",
      "id":"2-D",
      "host":"127.0.0.2",
      "dataPath":"/var/tmp/data",
      "running":true
    }</con:responseContent></con:response><con:response name="Dish3" id="6191850f-2264-4b56-883c-baeb33992bda" httpResponseStatus="200"><con:settings/><con:responseContent>{
      "name":"Dish - 3",
      "id":"3-D",
      "host":"127.0.0.3",
      "dataPath":"/var/tmp/data",
      "running":true
    }</con:responseContent></con:response><con:response name="Dish4" id="ec13dbf0-ae55-4e72-801b-2dd68bff396c" httpResponseStatus="200"><con:settings/><con:responseContent>{
      "name":"Dish - 4",
      "id":"4-D",
      "host":"127.0.0.4",
      "dataPath":"/var/tmp/data",
      "running":true
    }</con:responseContent></con:response><con:response name="Dish5" id="05406428-f6ac-4b0f-a131-3818527c0cf4" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
      "name":"Dish - 5",
      "id":"5-D",
      "host":"127.0.0.5",
      "dataPath":"/var/tmp/data",
      "running":false
    }</con:responseContent></con:response><con:response name="Dish6" id="9f06993d-0661-4f80-81c5-f7048aff1c71" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
      "name":"Dish - 6",
      "id":"6-D",
      "host":"127.0.0.6",
      "dataPath":"/var/tmp/data",
      "running":true
    }</con:responseContent></con:response><con:response name="Dish7" id="35fbd207-3b69-4039-b7b3-14d9139b9aa3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
      "name":"Dish - 7",
      "id":"7-D",
      "host":"127.0.0.7",
      "dataPath":"/var/tmp/data",
      "running":true
    }</con:responseContent></con:response><con:response name="Dish8" id="8216ec3b-9bc6-460c-82aa-887ba7f315db" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
      "name":"Dish - 8",
      "id":"8-D",
      "host":"127.0.0.8",
      "dataPath":"/var/tmp/data",
      "running":true
    }</con:responseContent></con:response><con:response name="Dish9" id="3f6e0976-24ed-4f94-90ea-9d6e487327c8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
      "name":"Dish - 9",
      "id":"9-D",
      "host":"127.0.0.9",
      "dataPath":"/var/tmp/data",
      "running":true
    }</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>